type SmsSettings implements BaseModel {
    _id: ID!
    key: ID!
    point: Int!
    chargeOption: SmsChargeOption!
    # 발신자 번호 배열. status가 CONFIRMED일때만 사용 가능. 빈 배열 또는 인증된 번호가 없는 경우 DefaultPhoneNumber로 문자 전송함. 전송비용 올라감.
    senders: [SmsSender!]!
    triggers: [SmsTrigger!]!
    createdAt: DateTime!
    updatedAt: DateTime!
    expiresAt: DateTime
}

interface SmsChargeOptionInterface {
    type: ChargingType!
}

union SmsChargeOption = SmsPrepayOption | SmsPostpayOption

type SmsPrepayOption implements SmsChargeOptionInterface {
    # 선불? 후불?
    type: ChargingType!
    # point가 x이하로 내려가면 충전함
    chargeDeadline: Int!
    # 충전시 얼마 충전할거?
    chargingUnit: Int!
}

type SmsPostpayOption implements SmsChargeOptionInterface {
    # 선불? 후불?
    type: ChargingType!
    # Month 단위임
    chargingPeriod: Int!
    # 과금 시작 날짜
    initDate: DateTime!
}

enum ChargingType {
    PREPAY
    POSTPAY
}

input SmsChargeOptionInput {
    type: ChargingType!
    prepayOption: SmsPrepayOptionInput
    postpayOption: SmsPostpayOptionInput
}

input SmsPrepayOptionInput {
    chargingLowerLimit: Int
    chargingUnit: Int
}

input SmsPostpayOptionInput {
    # Month 단위임
    chargingPeriod: Int!
    # 과금 시작 날짜
    initDate: DateTime!
}
